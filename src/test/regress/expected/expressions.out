--
-- expression evaluation tests that don't fit into a more specific file
--
--
-- Tests for SQLVAlueFunction
--
-- current_date  (always matches because of transactional behaviour)
SELECT date(now())::text = current_date::text;
 ?column? 
----------
 t
(1 row)

-- current_time / localtime
SELECT now()::timetz::text = current_time::text;
 ?column? 
----------
 t
(1 row)

SELECT now()::timetz(4)::text = current_time(4)::text;
 ?column? 
----------
 t
(1 row)

SELECT now()::time::text = localtime::text;
 ?column? 
----------
 t
(1 row)

SELECT now()::time(3)::text = localtime(3)::text;
 ?column? 
----------
 t
(1 row)

-- current_timestamp / localtimestamp (always matches because of transactional behaviour)
SELECT current_timestamp = NOW();
 ?column? 
----------
 t
(1 row)

-- precision
SELECT length(current_timestamp::text) >= length(current_timestamp(0)::text);
 ?column? 
----------
 t
(1 row)

-- localtimestamp
SELECT now()::timestamp::text = localtimestamp::text;
 ?column? 
----------
 t
(1 row)

-- current_role/user/user is tested in rolnames.sql
-- current database / catalog
SELECT current_catalog = current_database();
 ?column? 
----------
 t
(1 row)

-- current_schema
SELECT current_schema;
 current_schema 
----------------
 public
(1 row)

SET search_path = 'notme';
SELECT current_schema;
 current_schema 
----------------
 
(1 row)

SET search_path = 'pg_catalog';
SELECT current_schema;
 current_schema 
----------------
 pg_catalog
(1 row)

RESET search_path;
--
-- Tests for BETWEEN
--
explain (costs off)
select count(*) from date_tbl
  where f1 between '1997-01-01' and '1998-01-01';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate
   ->  Seq Scan on date_tbl
         Filter: ((f1 >= '01-01-1997'::date) AND (f1 <= '01-01-1998'::date))
(3 rows)

select count(*) from date_tbl
  where f1 between '1997-01-01' and '1998-01-01';
 count 
-------
     3
(1 row)

explain (costs off)
select count(*) from date_tbl
  where f1 not between '1997-01-01' and '1998-01-01';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate
   ->  Seq Scan on date_tbl
         Filter: ((f1 < '01-01-1997'::date) OR (f1 > '01-01-1998'::date))
(3 rows)

select count(*) from date_tbl
  where f1 not between '1997-01-01' and '1998-01-01';
 count 
-------
    13
(1 row)

explain (costs off)
select count(*) from date_tbl
  where f1 between symmetric '1997-01-01' and '1998-01-01';
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Seq Scan on date_tbl
         Filter: (((f1 >= '01-01-1997'::date) AND (f1 <= '01-01-1998'::date)) OR ((f1 >= '01-01-1998'::date) AND (f1 <= '01-01-1997'::date)))
(3 rows)

select count(*) from date_tbl
  where f1 between symmetric '1997-01-01' and '1998-01-01';
 count 
-------
     3
(1 row)

explain (costs off)
select count(*) from date_tbl
  where f1 not between symmetric '1997-01-01' and '1998-01-01';
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Seq Scan on date_tbl
         Filter: (((f1 < '01-01-1997'::date) OR (f1 > '01-01-1998'::date)) AND ((f1 < '01-01-1998'::date) OR (f1 > '01-01-1997'::date)))
(3 rows)

select count(*) from date_tbl
  where f1 not between symmetric '1997-01-01' and '1998-01-01';
 count 
-------
    13
(1 row)

--
-- Tests for ScalarArrayOpExpr with a hashfn
--
-- create a stable function so that the tests below are not
-- evaluated using the planner's constant folding.
begin;
create function return_int_input(int) returns int as $$
begin
	return $1;
end;
$$ language plpgsql stable;
create function return_text_input(text) returns text as $$
begin
	return $1;
end;
$$ language plpgsql stable;
select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
 ?column? 
----------
 t
(1 row)

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null);
 ?column? 
----------
 
(1 row)

select return_int_input(1) in (null, null, null, null, null, null, null, null, null, null, null);
 ?column? 
----------
 
(1 row)

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null);
 ?column? 
----------
 t
(1 row)

select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
 ?column? 
----------
 
(1 row)

select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null);
 ?column? 
----------
 
(1 row)

select return_text_input('a') in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j');
 ?column? 
----------
 t
(1 row)

-- NOT IN
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
 ?column? 
----------
 f
(1 row)

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 0);
 ?column? 
----------
 t
(1 row)

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 2, null);
 ?column? 
----------
 
(1 row)

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null);
 ?column? 
----------
 f
(1 row)

select return_int_input(1) not in (null, null, null, null, null, null, null, null, null, null, null);
 ?column? 
----------
 
(1 row)

select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
 ?column? 
----------
 
(1 row)

select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, null);
 ?column? 
----------
 
(1 row)

select return_text_input('a') not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j');
 ?column? 
----------
 f
(1 row)

rollback;
-- Test with non-strict equality function.
-- We need to create our own type for this.
begin;
create type myint;
create function myintin(cstring) returns myint strict immutable language
  internal as 'int4in';
NOTICE:  return type myint is only a shell
create function myintout(myint) returns cstring strict immutable language
  internal as 'int4out';
NOTICE:  argument type myint is only a shell
create function myinthash(myint) returns integer strict immutable language
  internal as 'hashint4';
NOTICE:  argument type myint is only a shell
create type myint (input = myintin, output = myintout, like = int4);
create cast (int4 as myint) without function;
create cast (myint as int4) without function;
create function myinteq(myint, myint) returns bool as $$
begin
  if $1 is null and $2 is null then
    return true;
  else
    return $1::int = $2::int;
  end if;
end;
$$ language plpgsql immutable;
create function myintne(myint, myint) returns bool as $$
begin
  return not myinteq($1, $2);
end;
$$ language plpgsql immutable;
create operator = (
  leftarg    = myint,
  rightarg   = myint,
  commutator = =,
  negator    = <>,
  procedure  = myinteq,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
);
create operator <> (
  leftarg    = myint,
  rightarg   = myint,
  commutator = <>,
  negator    = =,
  procedure  = myintne,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
);
create operator class myint_ops
default for type myint using hash as
  operator    1   =  (myint, myint),
  function    1   myinthash(myint);
create table inttest (a myint);
insert into inttest values(1::myint),(null);
-- try an array with enough elements to cause hashing
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null);
 a 
---
 1
 
(2 rows)

select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null);
 a 
---
(0 rows)

select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null);
 a 
---
(0 rows)

-- ensure the result matched with the non-hashed version.  We simply remove
-- some array elements so that we don't reach the hashing threshold.
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint, null);
 a 
---
 1
 
(2 rows)

select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint, null);
 a 
---
(0 rows)

select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint, null);
 a 
---
(0 rows)

rollback;
